# This is a basic workflow to help you get started with Actions

name: Check-Scan-Fail-Results

# Controls when the workflow will run
on:
  # Triggers the workflow on push or pull request events but only for the master branch
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:
# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  build:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v2

      - uses: actions/setup-java@v1 # Make java accessible on path so the uploadandscan action can run.
        with: 
          java-version: '8'

      - name: Build with Maven
        run: mvn -B package --file app/pom.xml

      - name: List files in the repository
        run: |
          ls -al ${{ github.workspace }}
      - uses: actions/upload-artifact@v2 # Copy files from repository to docker container so the next uploadandscan action can access them.
        with:
          name: CodePackage
          path: '**/*.war' # Wildcards can be used to filter the files copied into the container. See: https://github.com/actions/upload-artifact

      - uses: veracode/veracode-uploadandscan-action@master # Run the uploadandscan action. Inputs are described above.
        with:
          appname: '${{ secrets.VERACODE_APP_NAME }}'
          filepath: app/target/verademo.war
          vid: '${{ secrets.VERACODE_API_ID }}'
          vkey: '${{ secrets.VERACODE_API_KEY }}'
          version: '${{ github.run_id }}'
          scantimeout: 60
          #createprofile: false
          createsandbox: 'true'
          sandboxname: 'DailyBuild'
        
  get-sandbox-results:
      runs-on: windows-2019
      #container:
      #  image: veracode/api-signing:latest
      steps:
      # Note: this will only work up to about 500 flaws
      #		due to Veracode results limiting
      # See the get_flaws.sh script in the helpers directory
      #		for a more elaborate method
       - name: get sandbox results
         shell: pwsh
         run:  |        
              echo "Downloading the latest version of the Veracode Java API"              
              curl "https://repo1.maven.org/maven2/com/veracode/vosp/api/wrappers/vosp-api-wrappers-java/22.6.10.2/vosp-api-wrappers-java-22.6.10.2.jar" -o VeracodeJavaAPI.jar
              $appname = "Verademo"
              #java -jar VeracodeJavaAPI.jar -vid ${{ secrets.VERACODE_API_ID }} -vkey ${{ secrets.VERACODE_API_KEY }} -action getapplist | tee appidlist.txt
              #$veracodeappid = Get-Content .\appidlist.txt | findstr $appname | %{ $_.Split('"')[1]; }
              $veracodeappid = 1133829
              echo "Pulling the Sandbox ID List"
              java -jar VeracodeJavaAPI.jar -vid ${{ secrets.VERACODE_API_ID }} -vkey ${{ secrets.VERACODE_API_KEY }} -action getsandboxlist -appid $veracodeappid | tee sandboxlist.txt
              $veracodesandboxid = Get-Content .\sandboxlist.txt | findstr /r "sandbox_id=" | %{ $_.Split('"')[9]; } | Select-Object -Last 1
              java -jar VeracodeJavaAPI.jar -vid ${{ secrets.VERACODE_API_ID }} -vkey ${{ secrets.VERACODE_API_KEY }} -action passfail -appname $appname -sandboxid $veracodesandboxid > passfail.txt
              cat passfail.txt
              $scanresult = Get-Content .\\passfail.txt | %{ $_.Split('"')[7]; }
              If ($scanresult -eq "Pass")
                        {
                            Write-Output "The Veracode Sandbox Scan Passed, Moving to Next Step"
                        }
                        elseif ($scanresult -eq "Did Not Pass")
                        {   
                         Write-Output "The Veracode Sandbox Scan Did Not Pass, Failing the Build "
                         throw "Exception Thrown for Failed Policy Scan"
                        }
