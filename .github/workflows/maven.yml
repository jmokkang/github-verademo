# This workflow will build a Java project with Maven, and cache/restore any dependencies to improve the workflow execution time
# For more information see: https://help.github.com/actions/language-and-framework-guides/building-and-testing-java-with-maven



name: Upload-Scan-Policy-SCA

# Controls when the workflow will run
on:
  # Triggers the workflow on push or pull request events but only for the master branch
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  build:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v2

      - uses: actions/setup-java@v1 # Make java accessible on path so the uploadandscan action can run.
        with: 
          java-version: '8'

      - name: Build with Maven
        run: mvn -B package --file app/pom.xml

      - name: List files in the repository
        run: |
          ls -al ${{ github.workspace }}
      - uses: actions/upload-artifact@v2 # Copy files from repository to docker container so the next uploadandscan action can access them.
        with:
          name: CodePackage
          path: '**/*.war' # Wildcards can be used to filter the files copied into the container. See: https://github.com/actions/upload-artifact

      - uses: veracode/veracode-uploadandscan-action@master # Run the uploadandscan action. Inputs are described above.
        with:
          #appname: '${{ secrets.VERACODE_APP_NAME }}'
          appname: '${{github.repository}}'
          filepath: app/target/verademo.war
          vid: ${{ secrets.VERACODE_API_ID }}'
          vkey: '${{ secrets.VERACODE_API_KEY }}'
          scantimeout: 60
          #createprofile: false
          createprofile: true
        continue-on-error: true

  #on: 
  #push:
  #  paths-ignore:
  #    - "README.md"
  #schedule:
  #  - cron: 15 14 * * 6

  #jobs:
  veracode-sca-task:
    runs-on: ubuntu-latest
    name: Scan repository for Issues

    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: List Directory looking for scaResults.json
        run: |
          ls -lshart app; ls -lshart .; ls -lharts /tmp; ls -lharts ${HOME};
      - name: Run Veracode SCA
        env:
          SRCCLR_API_TOKEN: ${{ secrets.SRCCLR_API_TOKEN }}
        #uses: veracode/veracode-sca@v1.09
        run: |
           export SCAN_DIR="./app/" 
           curl -sSL https://download.sourceclear.com/ci.sh | sh -s -- scan --json=scaResults.json
           ls -lharts *.json
      - uses: actions/upload-artifact@v1
        with:
          name: SCAResults
          path: scaResults.json
        #with:
        #  github_token: ${{ secrets.GITHUB_TOKEN }}
        #  quick: true
        #  create-issues: true 
        #  fail-on-cvss: 1
      #  # Authorization token to query and create issues
      #  github_token: ${{ secrets.GITACT }}
      #  SRCCLR_API_TOKEN: ${{ secrets.SRCCLR_API_TOKEN }}
        # 
        #quick: # optional, default is false
        # Show update advisor
      #  update_advisor: true
        # A git URL to work with in case the scan is not for the current repository
        #url: # optional, default is 
        # The minimum CVSS value for vulnerability to be added as an issue
        #min-cvss-for-issue: # optional, default is 0
        # The maximum allowed cvss in found vulnerabilities to pass the step
        #fail-on-cvss: # optional, default is 10
        # An attribute to instruct the action to create an issue from found vulnerability or just simple text output
        #create-issues: # optional, default is false
        # A path within the repository where the build definition starts
       # path: ./app
        # Run the SRCCLR in debug mode
        #debug: # optional, default is false
        # Run the SRCCLR with the `--skip-collectors` options
        #skip-collectors: # optional, default is false
        # Run the SRCCLR with the `--allow-dirty` option
 #       allow-dirty: true # optional, default is false
        # Run the SRCCLR with the `--recursive` option
        #recursive: # optional, default is false
